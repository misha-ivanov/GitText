Git

Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. 

Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.

Каждая точка сохранения вашего проекта носит название коммит (commit). У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них. 

Создание репозитория и commit’a
~~
cd <путь к файлу> – переход в папку с файлом
git init – инициализация/создание репозитория
git add -- all – добавить все файлы проекта в commit
git add <имя_файла> – добавить конкретный файл в commit
git commit -m “<комментарий>” – создание commit’a и комментария
~~

Не стоит после каждого изменения файла делать commit. Чаще всего их создают, когда:
    • Создан новый функционал
    • Добавлен новый блок на верстке
    • Исправлены ошибки по коду
    • Вы завершили рабочий день и хотите сохранить код
Это поможет держать вашу ветки в чистоте и порядке. Тем самым, вы будете видеть историю изменений по каждому нововведению в вашем проекте, а не по каждому файлу.

Команда git status отображает состояние директории и индекса(staging area). Это позволяет определить, какие файлы в проекте отслеживаются Git, а также какие изменения будут включены в следующий коммит. 

git remote add <remote_name> <remote_repo_url> – добавить удаленный репозиторий в Git. 
Пример: git remote add origin https://github.com/misha-ivanov/GitText.git

git push --set-upstream origin master – создаёт удалённый репозиторий

git push origin  – отправляет коммит в репозиторий


Автоматическое авторство в коммите

git config –global user.name “Name Surname” – имя

git config –global user.email “Email” – электронная почта