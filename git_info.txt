----Git----

Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. 

Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.

Каждая точка сохранения вашего проекта носит название коммит (commit). У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них. 

Создание репозитория и commit’a
~~
cd <путь к файлу> – переход в папку с файлом
git init – инициализация/создание репозитория
git add --all – добавить все файлы проекта в commit
git add <имя_файла> – добавить конкретный файл в commit
git commit -m “<комментарий>” – создание commit’a и комментария
git commit -a - добавить все выделенные файлы проекта в commit
git commit -s - добавить подпись в commit
git commit --amend - добавить правку в предыдущий commit
~~

Не стоит после каждого изменения файла делать commit. Чаще всего их создают, когда:
    • Создан новый функционал
    • Добавлен новый блок на верстке
    • Исправлены ошибки по коду
    • Вы завершили рабочий день и хотите сохранить код
Это поможет держать вашу ветки в чистоте и порядке. Тем самым, вы будете видеть историю изменений по каждому нововведению в вашем проекте, а не по каждому файлу.

Команда git status отображает состояние директории и индекса(staging area). Это позволяет определить, какие файлы в проекте отслеживаются Git, а также какие изменения будут включены в следующий коммит. 

git remote add <remote_name> <remote_repo_url> – добавить удаленный репозиторий в Git. 
Пример: git remote add origin https://github.com/misha-ivanov/GitText.git
git remote -v - показывает настройки репозитория
~~
git push --set-upstream origin master – создаёт удалённый репозиторий
git push origin  – отправляет коммит в репозиторий
~~

Автоматическое авторство в коммите
~~
git config –global user.name “Name Surname” – имя
git config –global user.email “Email” – электронная почта
~~

----Git Branch----

Ветка в Git — это простой перемещаемый указатель на один из таких коммитов. По умолчанию, имя основной ветки в Git - master. Как только вы начнёте создавать коммиты, ветка master будет всегда указывать на последний коммит. Каждый раз при создании коммита указатель ветки master будет передвигаться на следующий коммит автоматически.

Что же на самом деле происходит при создании ветки? Всего лишь создаётся новый указатель для дальнейшего перемещения. Допустим вы хотите создать новую ветку с именем testing. Вы можете это сделать командой git branch :
~~
git branch testing - создание ветки с именем testing
~~

В Git HEAD - это указатель на текущую локальную ветку. В нашем случае мы все еще находимся в ветке master. Команда git branch только создаёт новую ветку, но не переключает на неё.
Для переключения на существующую ветку выполните команду git checkout. Давайте переключимся на ветку testing:
~~
git checkout testing
~~

По умолчанию git log отобразит историю коммитов только для текущей ветки. Для просмотра истории коммитов другой ветки необходимо явно указать её имя: git log testing. Чтобы посмотреть историю по всем веткам — выполните команду с дополнительным флагом: git log --all.
~~
git log <branch_name> - просмотр истории коммитов конкретной ветки
git log --all - просмотр истории по всем веткам
git log --oneline --decorate --graph --all - отображение истории коммитов, текущего положения указателей веток и истории ветвления
git log -10 - отображение последних 10 коммитов
~~

Важно запомнить, что при переключении веток в Git происходит изменение файлов в рабочем каталоге. Если вы переключаетесь на старую ветку, то рабочий каталог будет выглядеть так же, как выглядел на момент последнего коммита в ту ветку. Если Git по каким-то причинам не может этого сделать — он не позволит вам переключиться вообще.

~~
git checkout -b <newbranchname> - одновременное создание новой ветки и переключение на неё
~~

Начиная с Git версии 2.23, вы можете использовать git switch вместо git checkout, чтобы:
~~
git switch testing-branch - переключиться на существующую ветку 
git switch -c new-branch - создать новую ветку и переключиться на нее; Флаг -c означает создание, но также можно использовать полный формат:` --create`.
git switch - - Вернуться к предыдущей извлечённой ветке: 
~~

